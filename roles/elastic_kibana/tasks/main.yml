- name: Create Elasticsearch group
  ansible.builtin.group:
    name: "{{ elasticsearch_group }}"
    system: yes

- name: Create Elasticsearch user
  ansible.builtin.user:
    name: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    system: yes
    create_home: no

- name: Create Kibana group
  ansible.builtin.group:
    name: "{{ kibana_group }}"
    system: yes

- name: Create Kibana user
  ansible.builtin.user:
    name: "{{ kibana_user }}"
    group: "{{ kibana_group }}"
    system: yes
    create_home: no

- name: Create directories for Elasticsearch
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"
    mode: '0755'
  loop:
    - "{{ elasticsearch_install_dir }}"
    - "{{ elasticsearch_data_dir }}"
    - "{{ elasticsearch_config_dir }}"

- name: Create directories for Kibana
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ kibana_user }}"
    group: "{{ kibana_group }}"
    mode: '0755'
  loop:
    - "{{ kibana_install_dir }}"
    - "{{ kibana_config_dir }}"

- name: Get system architecture
  ansible.builtin.command: uname -m
  register: system_arch
  changed_when: false

- name: Set architecture variables
  ansible.builtin.set_fact:
    elasticsearch_arch: "{{ elasticsearch_arch_map[system_arch.stdout] | default('unsupported') }}"
    kibana_arch: "{{ kibana_arch_map[system_arch.stdout] | default('unsupported') }}"

- name: Fail if architecture is not supported
  ansible.builtin.fail:
    msg: "Unsupported architecture: {{ system_arch.stdout }}"
  when: elasticsearch_arch == "unsupported" or kibana_arch == "unsupported"

- name: Download and install Elasticsearch
  ansible.builtin.unarchive:
    src: "https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-{{ elasticsearch_version }}-{{ elasticsearch_arch }}.tar.gz"
    dest: "{{ elasticsearch_install_dir }}"
    remote_src: yes
    extra_opts: [--strip-components=1]
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"

- name: Download and install Kibana
  ansible.builtin.unarchive:
    src: "https://artifacts.elastic.co/downloads/kibana/kibana-{{ kibana_version }}-{{ kibana_arch }}.tar.gz"
    dest: "{{ kibana_install_dir }}"
    remote_src: yes
    extra_opts: [--strip-components=1]
    owner: "{{ kibana_user }}"
    group: "{{ kibana_group }}"

- name: Configure systemd service for Elasticsearch
  ansible.builtin.template:
    src: "elasticsearch.service.j2"
    dest: "/etc/systemd/system/elasticsearch.service"
    mode: '0644'
  notify: Restart Elasticsearch

- name: Configure systemd service for Kibana
  ansible.builtin.template:
    src: "kibana.service.j2"
    dest: "/etc/systemd/system/kibana.service"
    mode: '0644'
  notify: Restart Kibana

- name: Enable and start Elasticsearch service
  ansible.builtin.systemd:
    name: elasticsearch
    enabled: yes
    state: started

- name: Enable and start Kibana service
  ansible.builtin.systemd:
    name: kibana
    enabled: yes
    state: started

